{"version":3,"sources":["Components/Jumbotron/index.js","Components/Navbar/index.js","Components/Map/index.js","Components/Events/index.js","Components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","Component","Navbar","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","MAP","src","allowfullscreen","Events","href","Map","FOOTER","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8YAeeA,G,uLAVX,OACE,yBAAKC,UAAU,6BACb,yBAAKA,UAAU,mB,GAJCC,cCwBTC,G,MAvBA,WACb,OACI,yBAAKF,UAAU,2BACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMA,UAAU,0BAA0BG,GAAG,KAA7C,gBAIF,4BACEH,UAAU,gCACVI,KAAK,SACLC,cAAY,WACZC,cAAY,sBACZC,gBAAc,qBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMT,UAAU,4BCVXU,G,MARH,WACV,OACE,yBAAKV,UAAU,aACb,4BAAQW,IAAI,0RAA0RC,gBAAgB,QCe7SC,G,MAjBA,WACX,OACI,yBAAKb,UAAU,mBACX,wBAAIA,UAAU,gCAAd,UACA,6BACA,wBAAIA,UAAU,oBAAd,gCACA,8cACA,2BAAG,qCAAH,qDACA,2BAAG,sCAAc,uBAAGc,KAAK,yCAAR,mEACjB,kBAACC,EAAD,MACA,2BAAG,8CAAH,uKACA,2BAAG,qCAAH,gNACA,uBAAGf,UAAU,YAAb,gEAAqF,uBAAGc,KAAK,6BAAR,sBAArF,QCHGE,G,MAVA,WACX,OACI,4BAAQhB,UAAU,mCACd,yBAAKA,UAAU,aACX,0BAAMA,UAAU,eAAhB,8CCeDiB,E,iLAXX,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAPUhB,aCGEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.04f16a41.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass Jumbotron extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container\">\r\n          \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\r\nimport \"./style.css\";\r\n\r\nconst Navbar = () => {\r\n  return(\r\n      <nav className=\"navbar navbar-expand-lg\">\r\n        <Router>\r\n          <Link className=\"navbarText navbar-brand\" to=\"/\">\r\n            Hot Dog USA\r\n          </Link>\r\n        </Router>\r\n        <button\r\n          className=\"navbar-toggler custom-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarNavAltMarkup\"\r\n          aria-controls=\"navbarNavAltMarkup\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n      </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nconst MAP = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d18370.2713822628!2d-122.19201378249036!3d47.72627020729511!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x54900dbe8d81dfb1%3A0xcdf886b9c8fa8ad9!2sKamiakin%20Middle%20School!5e0!3m2!1sen!2sus!4v1568043629767!5m2!1sen!2sus\" allowfullscreen=\"\"></iframe>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MAP;","import React from 'react';\r\nimport Map from '../Map';\r\nimport './style.css';\r\n\r\nconst Events = () => {\r\n    return (\r\n        <div className=\"container pt-10\">\r\n            <h1 className=\"text-center font-weight-bold\">Events</h1>\r\n            <hr />\r\n            <h3 className=\"font-weight-bold\">Northwest Jump Rope Workshop</h3>\r\n            <p>Awesome instructors from the US and Canada will provide top-level instruction. The workshop will include teaching the basics to beginners as well as helping intermediate jumpers learning new tricks. Instruction will include single rope freestyle, partner skills, Chinese Wheel &amp; Double Dutch. We recommend jumpers be 1st grade or older. There is also an adult workshop offered on the same day if you want to keep up with your kids!</p>\r\n            <p><b>When: </b>Saturday, November 10, 2018 - 9am-Noon or 9am-3pm</p>\r\n            <p><b>Where: </b><a href=\"https://goo.gl/maps/s9NMbguHab5ZjC7w5\">Kamiakin Middle School, 14111 132nd Ave NE, Kirkland, WA 98034</a></p>\r\n            <Map />\r\n            <p><b>What to bring: </b>A jump rope and water. Jump ropes will be available for purchase at the team store if you do not have one. Wear comfortable clothes and athletic shoes for jumping.</p>\r\n            <p><b>Cost: </b>$30 USD per jumper for half-day or $45 USD for all-day if received by 11/1/2018. After the deadline add $5 USD. Workshop T-shirts may be pre-ordered for $15 USD. (T-shirt order must be received by 10/23.)</p>\r\n            <p className=\"lastPara\">If you have any questions, please contact Debbie Erickson at <a href=\"mailto:deb_skis@yahoo.com\">deb_skis@yahoo.com</a>.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Events;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst FOOTER = () => {\r\n    return (\r\n        <footer className=\"footer text-center mt-auto py-3\">\r\n            <div className=\"container\">\r\n                <span className=\"text-center\">&copy;2019 CrashLabs All Rights Reserved</span>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default FOOTER;","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport Jumbotron from \"./Components/Jumbotron\";\r\nimport Navbar from \"./Components/Navbar\";\r\n// import AboutUs from \"./Components/AboutUs\";\r\nimport Events from \"./Components/Events\";\r\nimport FOOTER from \"./Components/Footer\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Navbar />\r\n        <Jumbotron />\r\n        <Events />\r\n        <FOOTER />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}