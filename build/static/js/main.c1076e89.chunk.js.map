{"version":3,"sources":["Components/Jumbotron/index.js","Components/Navbar/index.js","Components/Coach/index.js","Components/Coaches/index.js","Components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","Component","Navbar","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Coach","image","altText","bio","src","alt","coachesData","Coaches","map","coach","coachIndex","key","Footer","App","basename","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2XAeeA,G,uLAVX,OACE,yBAAKC,UAAU,6BACb,yBAAKA,UAAU,mB,GAJCC,cCwBTC,G,MAvBA,WACb,OACI,yBAAKF,UAAU,4CACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMA,UAAU,0BAA0BG,GAAG,KAA7C,gBAIF,4BACEH,UAAU,gCACVI,KAAK,SACLC,cAAY,WACZC,cAAY,sBACZC,gBAAc,qBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMT,UAAU,4BCZXU,EAPD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAASC,EAAnB,EAAmBA,IAAnB,OACZ,yBAAKb,UAAU,SACb,yBAAKc,IAAKH,EAAOI,IAAKH,IACtB,2BAAIC,KCDFG,G,MAAc,CAClB,CACEL,MAAO,uBACPC,QAAS,QACTC,IACE,2oCAEJ,CACEF,MAAO,yBACPC,QAAS,QACTC,IACE,2jCAEJ,CACEF,MAAO,6BACPC,QAAS,UACTC,IACE,+sBAqBSI,EAjBC,kBACd,yBAAKjB,UAAU,aACb,wBAAIA,UAAU,eAAd,WACA,6BACA,yBAAKA,UAAU,OACZgB,EAAYE,IAAI,SAACC,EAAOC,GAAR,OACf,kBAAC,EAAD,CACEC,IAAKD,EACLT,MAAOQ,EAAMR,MACbC,QAASO,EAAMP,QACfC,IAAKM,EAAMN,WCtBNS,G,MAVA,WACX,OACI,4BAAQtB,UAAU,mCACd,yBAAKA,UAAU,aACX,0BAAMA,UAAU,eAAhB,8CCgBDuB,E,iLAXX,OACE,kBAAC,IAAD,CAAQC,SAAS,gBACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAPUvB,aCEEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c1076e89.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass Jumbotron extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container\">\r\n          \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\r\nimport \"./style.css\";\r\n\r\nconst Navbar = () => {\r\n  return(\r\n      <nav className=\"navbar navbar-expand-lg font-weight-bold\">\r\n        <Router>\r\n          <Link className=\"navbarText navbar-brand\" to=\"/\">\r\n            Hot Dog USA\r\n          </Link>\r\n        </Router>\r\n        <button\r\n          className=\"navbar-toggler custom-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarNavAltMarkup\"\r\n          aria-controls=\"navbarNavAltMarkup\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n      </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nconst Coach = ({ image, altText, bio }) => (\r\n  <div className=\"col-4\">\r\n    <img src={image} alt={altText} />\r\n    <p>{bio}</p>\r\n  </div>\r\n);\r\n\r\nexport default Coach;\r\n","import React from \"react\";\r\nimport Coach from \"../Coach\";\r\nimport \"./style.css\";\r\n\r\nconst coachesData = [\r\n  {\r\n    image: \"/images/brianHsu.jpg\",\r\n    altText: \"brian\",\r\n    bio:\r\n      \"Brian started jumping rope in 2000 at an elementary school jump rope club in Federal Way, Washington. He went on to break the school double under record with an earth-shattering 77 double unders and quickly joined the Leaping Leopards, a local competitive team from Lake Grove Elementary. In 2007, the coach of the Leaping Leopards retired, and Brian was invited to join Hot Dog USA, an invitation he gladly accepted. After enjoying competitive success under the training of the Hot Dog team, Brian became an assistant coach for the B Team in 2010. Since then, he has transitioned to Fusion Director and an assistant coach for the Junior and Senior A Teams. Brian has won multiple national and world championships, jumped for Cirque du Soleil, entertained crowds at NBA games, and performed at the 2012 London Olympic Games. In 2016, Brian co-founded the American Jump Rope Federation (AMJRF), which later became the recognized national governing body for jump rope in the United States. He currently sits on the executive board of AMJRF as the secretary general. Outside of jump rope, Brian is a Software Engineer at Wicket Labs and enjoys playing the piano.\"\r\n  },\r\n  {\r\n    image: \"/images/carlaLeroy.jpg\",\r\n    altText: \"carla\",\r\n    bio:\r\n      \"Carla has been involved with the sport of jump rope, and Hot Dog USA, for over 30 years. She started competing at the age of 5 and continued for 18 years. While competing, she earned 18 national trophies, 2 world championships, and 2 world silver medals. Carla is grateful for the travel opportunities this sport has offered her. Her travels took her all around the U.S., as well as to Europe, Asia, and Australia. Her favorites include Sydney, Australia; Seoul, Korea; and Nome, Alaska. Coach Carla is grateful for her time as a competitive athlete but loves coaching just as much. She started mentoring younger jumpers as early as the age of 12 and transitioned to full-time coaching in the fall of 2004. She also spent many years training judges and judging in regional and national competitions. Carla graduated from Central Washington University with a degree in Elementary Education and a minor in dance in 2004. After graduating, she spent seven years as a teacher at Margaret Mead Elementary School before becoming a stay-at-home mom to daughters Emma (8) and Olivia (5).\"\r\n  },\r\n  {\r\n    image: \"/images/christiHartman.jpg\",\r\n    altText: \"christi\",\r\n    bio:\r\n      \"Christi is currently a para-educator at Helen Keller Elementary working with special needs children. She holds a Bachelor's degree in Exercise Science and Recreation from Seattle Pacific University (SPU). Christi was a competitive gymnast for 12 years in the independent club system and a former All-American at the university level where her career included a National Championship win at SPU. Christi's current athletic activities include trail running, competitive relays, and marathons. Christi and her husband ran and completed the Boston Marathon in recent years, and Christi also has completed a 50-mile ultra-marathon! Christi is married and has two daughters, both of whom are alumni of the Hot Dog team.\"\r\n  }\r\n];\r\n\r\nconst Coaches = () => (\r\n  <div className=\"container\">\r\n    <h1 className=\"text-center\">Coaches</h1>\r\n    <hr />\r\n    <div className=\"row\">\r\n      {coachesData.map((coach, coachIndex) => (\r\n        <Coach\r\n          key={coachIndex}\r\n          image={coach.image}\r\n          altText={coach.altText}\r\n          bio={coach.bio}\r\n        />\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Coaches;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"footer text-center mt-auto py-3\">\r\n            <div className=\"container\">\r\n                <span className=\"text-center\">&copy;2019 CrashLabs All Rights Reserved</span>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport Jumbotron from \"./Components/Jumbotron\";\r\nimport Navbar from \"./Components/Navbar\";\r\nimport Coaches from './Components/Coaches';\r\n// import AboutUs from \"./Components/AboutUs\";\r\n// import Events from \"./Components/Events\";\r\nimport Footer from \"./Components/Footer\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router basename=\"/hotdoug-usa\">\r\n        <Navbar />\r\n        <Jumbotron />\r\n        <Coaches />\r\n        <Footer />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}